#!/usr/bin/env ruby

require_relative 'lib/spv.rb'
require 'commander/import'

program :name, 'Soft Proof Viewer - Command Line Interface'
program :version, '0.0.2'
program :description, 'Offline cache preparation utillity for Soft Proofing Viewer (SPV).'

$app = 'sample'

global_option('-a', '--app <APP>', String, "Use application namespace") do |app|
  $app = app
end

global_option('-o','--output <json|jsonp|short>', String, "Force output data to be formatted, override application configuration.") do |type|
  $type = type
end

command :check do |c|
  c.syntax = 'spv-cli check'
  c.summary = 'Checks all required library and dependencies.'
  c.description = 'Some libraries may be missing and we find out which one.'
  c.example 'Run checks', 'spv-cli check'
  c.option '-n', '--name NAME', String, "Specify Namespace"
  c.action do |args, options|
    # @todo Verify expected libraries here.
  end
end

command :add do |c|
  c.syntax = 'spv-cli add -a <APP> [-s <SEL>] [-i <IDS>] <SOURCE_DOCUMENT>'
  c.summary = 'Adds page version to the cache, creates page if not present.'
  c.description = 'Page is verfied and checked before it is added, the output from the command is JSON (unless other format is specified.)'
  c.option '-s', '--sel SEL', String, "Page selection from the source document."
  c.option '-i', '--ids IDS', String, "Comma separated list of page IDS to be assgined to."
  c.action do |args, options|
    p = SPV::Processor.new($app)
    raise "No source document specified" if args[0].nil?
    p.add( args[0], options.sel, SPV::parse_ids(options.ids, false) )
    p.process_queue
    p.output(p.report, $type)
  end
end

command :delete do |c|
  c.summary = %Q[Removes page and all its version from the repository]
  c.syntax = 'spv-cli delete -a <APP> -i <IDS> | <IDS>'
  c.option '-i', '--ids IDS', String, "Comma separated list of page IDS to be deleted."
  c.action do |args, options|
    p = SPV::Processor.new($app)
    p.del(SPV::parse_ids(options.ids || args[0].to_s))
    p.output(p.report, $type)
  end
end

command :get do |c|
  c.summary = %Q[Gets page details and returns details]
  c.syntax = 'spv-cli get -a <APP> -i <IDS> | <IDS>'
  c.option '-i', '--ids IDS', String, "Comma separated list of page IDS to be listed."
  c.action do |args, options|
    p = SPV::Processor.new($app)
    p.get(SPV::parse_ids(options.ids || args[0].to_s))
    p.output(p.report, $type)
  end
end

command :list do |c|
  c.summary = %Q[List all or selected pages detected in the application's namespace]
  c.description = %Q[List all pages or if specified, these matching the <PATTERN>. The pattern is not a regular expression; instead it follows rules similar to shell filename globbing. To ensure globbing works correctly please specify the pattern in double-quotes.]
  c.syntax = 'spv-cli list -a <APP> [-p <PATTERN>]'
  c.option "-p", "--pattern PATTERN", String, "Pattern"

  c.action do |args, options|
    pattern = options.pattern || "*"
    p = SPV::Processor.new($app)
    p.list(pattern)
    p.output(p.report, $type)
  end
end

command :intent do |c|
  c.summary = %Q[Controls output intent reposiotry]
  c.description = %Q[Output intent repository keeps ICC profiles mapped to the common names]
  c.syntax = "spv-cli intent -s <NAME> <PROFILE.icc> | -d <NAME> | -l"
  c.option "-s", "--set <NAME> <PROFILE>", String, "Set an ICC profile under the <NAME>, replacing existing"
  c.option "-g", "--get <NAME>", String, "Gets intent indicated by <NAME>."
  c.option "-d", "--del <NAME>", String, "Delete intent with <NAME> (can be comma-separated list too)"
  c.option "-l", "--list", "List all available intents for the application's namespace"
  c.action do |args, options|
    p = SPV::Processor.new($app)
    if options.set
      raise "No ICC profile specified" unless args[0]
      p.intent_set(options.set.to_s, args[0])
      p.output(p.intents[options.set.to_s], $type)
    elsif options.get
      p.intent_list
      p.output(p.intents[options.get.to_s], $type)
    elsif options.del
      p.output(p.intents[options.del.to_s], $type)
      p.intent_del(options.del)
    else
      p.intent_list
      p.output(p.intents, $type)
    end
  end
end

command :display do  |c|
  c.summary = %Q[Controls display's calibration]
  c.description = %Q[Calibration keeps the reposotiory of color probes and the assciated display profile.]
  c.syntax = "spv-cli display -s <NAME> <PROFILE.icc> | -d <NAME> | -l"
  c.option "-s", "--set <NAME> <PROFILE.icc>", String, "Set an ICC profile under the <NAME>, replacing existing"
  c.option "-g", "--get <NAME>", String, "Gets display indicated by <NAME>."
  c.option "-d", "--del <NAME>", String, "Delete intent with <NAME> (can be comma-separated list too)"
  c.option "-l", "--list", "List all available intents for the application's namespace"
  c.action do |args, options|
    p = SPV::Processor.new($app)
    if options.set
      raise "No ICC profile specified" unless args[0]
      p.display_set(options.set, args[0])
      p.output(p.displays[options.set.to_s], $type)
    elsif options.get
      p.display_list
      p.output(p.displays[options.get.to_s], $type)
    elsif options.del
      p.output(p.displays[options.del.to_s], $type)
      p.display_del(options.del)
    else
      p.display_list
      p.output(p.displays, $type)
    end

  end
end

command :run do |c|
  c.syntax = 'spv-cli run'
  c.summary = 'Lanuches the sidekiq worker to perform conversion process in the background (requires Redis).'
  c.description = 'The redis must be installed in order to run background processing'
  c.option '-d', '--deamonize', "Execute in the background"
  c.option '-l', '--log FILE', String, "Output log to the file instead standard output"
  c.example 'Run sidekiq and perform opertions.', 'spv-cli run'
  c.action do |args, options|
    system "bundle exec sidekiq -r ./lib/spv/spv_worker.rb #{options.deamonize ? "-d" : ''}"
  end
end


command :server do |c|
  c.syntax = 'spv-cli server'
  c.summary = 'Starts independent web server with REST API'
  c.action do |args, options|
    require_relative 'lib/spv/spv_rest_api'
    SPV::RestAPI.run!
  end
end
